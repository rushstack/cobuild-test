// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parseResx correctly ignores a string: Loc file 1`] = `
Object {
  "foo": Object {
    "comment": "Foo",
    "value": "foo",
  },
}
`;

exports[`parseResx correctly ignores a string: ignoreStrings calls 1`] = `
Array [
  Array [
    "test.resx",
    "foo",
  ],
  Array [
    "test.resx",
    "bar",
  ],
]
`;

exports[`parseResx correctly ignores a string: terminal output 1`] = `Object {}`;

exports[`parseResx fails to parse a RESX file with a duplicate string: Loc file 1`] = `
Object {
  "stringA": Object {
    "comment": undefined,
    "value": "Another string",
  },
}
`;

exports[`parseResx fails to parse a RESX file with a duplicate string: terminal output 1`] = `
Object {
  "errorOutput": "test.resx(6,45): Duplicate string value \\"stringA\\"[n]",
}
`;

exports[`parseResx ignoreMissingResxComments when set to false, warns on a missing comment: Loc file 1`] = `
Object {
  "stringWithoutAComment": Object {
    "comment": undefined,
    "value": "String without a comment",
  },
}
`;

exports[`parseResx ignoreMissingResxComments when set to false, warns on a missing comment: terminal output 1`] = `
Object {
  "warningOutput": "test.resx(3,59): Missing string comment in <data> element[n]",
}
`;

exports[`parseResx ignoreMissingResxComments when set to true, ignores a missing comment: Loc file 1`] = `
Object {
  "stringWithoutAComment": Object {
    "comment": undefined,
    "value": "String without a comment",
  },
}
`;

exports[`parseResx ignoreMissingResxComments when set to true, ignores a missing comment: terminal output 1`] = `Object {}`;

exports[`parseResx ignoreMissingResxComments when set to undefined, warns on a missing comment: Loc file 1`] = `
Object {
  "stringWithoutAComment": Object {
    "comment": undefined,
    "value": "String without a comment",
  },
}
`;

exports[`parseResx ignoreMissingResxComments when set to undefined, warns on a missing comment: terminal output 1`] = `Object {}`;

exports[`parseResx parses a valid file with a schema: Loc file 1`] = `
Object {
  "bar": Object {
    "comment": "Bar",
    "value": "bar",
  },
  "foo": Object {
    "comment": "Foo",
    "value": "foo",
  },
}
`;

exports[`parseResx parses a valid file with a schema: terminal output 1`] = `Object {}`;

exports[`parseResx parses a valid file with quotemarks: Loc file 1`] = `
Object {
  "stringWithQuotes": Object {
    "comment": "RESX string with quotemarks",
    "value": "\\"RESX string with quotemarks\\"",
  },
}
`;

exports[`parseResx parses a valid file with quotemarks: terminal output 1`] = `Object {}`;

exports[`parseResx prints an error on invalid XML: Loc file 1`] = `
Object {
  "foo": Object {
    "comment": "Foo",
    "value": "foo",
  },
}
`;

exports[`parseResx prints an error on invalid XML: terminal output 1`] = `
Object {
  "errorOutput": "test.resx(3,41): Found unexpected non-empty text node in RESX <data> element[n]",
}
`;

exports[`parseResx resxNewlineNormalization when set to CrLf, normalizes to CrLf: Loc file 1`] = `
Object {
  "stringWithTabsAndNewlines": Object {
    "comment": "RESX string with newlines and tabs",
    "value": "
			RESX string with newlines and tabs
    ",
  },
}
`;

exports[`parseResx resxNewlineNormalization when set to CrLf, normalizes to CrLf: terminal output 1`] = `Object {}`;

exports[`parseResx resxNewlineNormalization when set to Lf, normalizes to Lf: Loc file 1`] = `
Object {
  "stringWithTabsAndNewlines": Object {
    "comment": "RESX string with newlines and tabs",
    "value": "
			RESX string with newlines and tabs
    ",
  },
}
`;

exports[`parseResx resxNewlineNormalization when set to Lf, normalizes to Lf: terminal output 1`] = `Object {}`;
